/**********************************************************************
 Java CUP specification for a parser for base programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).lineNum,
                     ((TokenVal)currToken.value).charNum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INTEGER;
terminal                LOGICAL;
terminal                VOID;
terminal                TUPLE;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                LSQBRACKET;
terminal                RSQBRACKET;
terminal                COLON;
terminal                COMMA;
terminal                DOT;
terminal                INPUTOP;
terminal                OUTPUTOP;
terminal                ASSIGN;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                AND;
terminal                OR;
terminal                NOT;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                GREATER;
terminal                GREATEREQ;
terminal                LESS;
terminal                LESSEQ;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                READ;
terminal                WRITE;
terminal                RETURN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode         type;
non terminal IdNode           id;
non terminal LinkedList  	  tupleBody;
non terminal TupleDeclNode    tupleDecl;
non terminal FormalsListNode  formals;
non terminal LinkedList		  formalsList;
non terminal FormalDeclNode	  formalDecl;
non terminal FctnDeclNode	  fctnDecl;
non terminal FctnBodyNode	  fctnBody;
non terminal LinkedList	      varDeclList;
non terminal LinkedList		  stmtList;
non terminal StmtNode         stmt;
non terminal CallExpNode	  fctnCall;
non terminal LinkedList       actualList; 
non terminal AssignExpNode	  assignExp;
non terminal ExpNode		  loc;
non terminal ExpNode		  exp;
non terminal ExpNode		  term;
 
/* NOTE: Add precedence and associativity declarations here */

precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc EQUALS, NOTEQUALS, GREATER, GREATEREQ, LESS, LESSEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence nonassoc NOT;
precedence left COLON;

start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
				|   tupleDecl: t
				{: RESULT = t;
				:}
				|	fctnDecl: f
				{:	RESULT = f;
				:}
                ;

varDeclList		::= varDeclList:vdl varDecl:vd
				{:	vdl.add(vd);
				    RESULT = vdl;
				:}
				| /* epsilon */
				{:	RESULT = new LinkedList<VarDeclNode>();
				:}
				;

varDecl         ::= type:t id:i DOT
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NON_TUPLE);
                :}
				|  TUPLE id:id1 id:id2 DOT
				{: RESULT = new VarDeclNode(new TupleNode(id1), id2, 2);
				:}
                ;

fctnDecl		::= type:t id:i formals:fm fctnBody:fb
				{: RESULT = new FctnDeclNode(t, i, fm, fb); 
				:}
				;

type            ::= LOGICAL
                {: RESULT = new LogicalNode();
                :}
				|  INTEGER
				{: RESULT = new IntegerNode();
				:}
				|  VOID
				{: RESULT = new VoidNode();
				:}
				;

id              ::= ID:i
                {: RESULT = new IdNode(i.lineNum, i.charNum, i.idVal);
                :}
                ;


tupleDecl		::= TUPLE id:i LCURLY tupleBody:tb RCURLY DOT
				{: RESULT = new TupleDeclNode(i, new DeclListNode(tb));
				:}
				;

tupleBody		::= tupleBody:tb varDecl:v
				{: tb.add(v);
					RESULT = tb;
				:}
				|  varDecl:v
				{: LinkedList<DeclNode> list = new LinkedList<DeclNode>();
					list.add(v);
					RESULT = list;
				:}
				;

formals			::= LCURLY RCURLY
				{: LinkedList<FormalDeclNode> empty = new LinkedList<FormalDeclNode>();
				   RESULT = new FormalsListNode(empty);
				:}
				|  LCURLY formalsList:fl RCURLY
				{: RESULT = new FormalsListNode(fl);
				:}
				;

formalsList		::= formalDecl:fd
				{:  LinkedList<FormalDeclNode> list = new LinkedList<FormalDeclNode>();
					list.add(fd);
					RESULT = list;
				:}
				| formalDecl:fd COMMA formalsList:fl
				{:  fl.addFirst(fd);
					RESULT = fl;
				:}
				;

formalDecl		::= type:t id:i
				{: RESULT = new FormalDeclNode(t, i);
				:}
				;

fctnBody		::= LSQBRACKET varDeclList:vdl stmtList:sl RSQBRACKET
				{:	StmtListNode sln = new StmtListNode(sl);
					DeclListNode dcl = new DeclListNode(vdl);
					RESULT = new FctnBodyNode(dcl, sln);
				:}
				;

stmtList        ::= stmtList:sl stmt:s
				{: sl.add(s);
				   RESULT = sl;
				:}
                | /* epsilon */
				{: RESULT = new LinkedList<StmtNode>();
				:}
                ;

stmt			::= assignExp:ae DOT
				{: RESULT = new AssignStmtNode(ae);
				:}
				| fctnCall:fc DOT
				{: RESULT = new CallStmtNode(fc);
				:}
				| loc:l PLUSPLUS DOT 
				{: RESULT = new PostIncStmtNode(l);
				:}
				| loc:l MINUSMINUS DOT
				{: RESULT = new PostDecStmtNode(l);
				:}
				| IF exp:e LSQBRACKET varDeclList:vdl stmtList:sl RSQBRACKET
				{:	DeclListNode dList = new DeclListNode(vdl);
					StmtListNode sList = new StmtListNode(sl);
					RESULT = new IfStmtNode(e, dList, sList);
				:}
				| IF exp:e LSQBRACKET varDeclList:vdl1 stmtList:sl1 RSQBRACKET ELSE LSQBRACKET varDeclList:vdl2 stmtList:sl2 RSQBRACKET
				{: DeclListNode dList1 = new DeclListNode(vdl1);
				   StmtListNode sList1 = new StmtListNode(sl1);
				   DeclListNode dList2 = new DeclListNode(vdl2);
				   StmtListNode sList2 = new StmtListNode(sl2);
			
				   RESULT = new IfElseStmtNode(e, dList1, sList1, dList2, sList2);
				:}
				| WHILE exp:e LSQBRACKET varDeclList:vdl stmtList:sl RSQBRACKET
				{: DeclListNode dList = new DeclListNode(vdl);
				   StmtListNode sList = new StmtListNode(sl);

				   RESULT = new WhileStmtNode(e, dList, sList);
				:}
				| READ INPUTOP loc:l DOT
				{: RESULT = new ReadStmtNode(l);
				:}
				| WRITE OUTPUTOP exp:e DOT
				{: RESULT = new WriteStmtNode(e);
				:}
				| RETURN exp:e DOT
				{: RESULT = new ReturnStmtNode(e);
				:}
				| RETURN DOT
				{: RESULT = new ReturnStmtNode(null); 
				:}
				;

fctnCall		::=	id:i LPAREN RPAREN
				{:	RESULT = new CallExpNode(i);
				:}
				|	id:i LPAREN actualList:actl RPAREN
				{:	ExpListNode eln = new ExpListNode(actl);
					RESULT = new CallExpNode(i, eln);
				:}
				;

actualList		::= exp:expr
				{: LinkedList<ExpNode> expNodeList = new LinkedList<ExpNode>();
				   expNodeList.add(expr);
				   RESULT = expNodeList;
				:}
				| actualList:actl COMMA exp:expr
				{: actl.add(expr);
				   RESULT = actl;
				:}
				;

loc				::= id:i
				{: RESULT = i;
				:}
				| loc:l COLON id:i
				{: RESULT = new TupleAccessExpNode(l, i);
				:}
				;

term			::= loc:l
				{: RESULT = l;
				:}
				| TRUE:t
				{: RESULT = new TrueNode(t.lineNum, t.charNum);
				:}
				| FALSE:f
				{: RESULT = new FalseNode(f.lineNum, f.charNum);
				:}
				| INTLITERAL:i
                {: RESULT = new IntLitNode(i.lineNum, i.charNum, i.intVal);
                :}
				| STRLITERAL:s
                {: RESULT = new StringLitNode(s.lineNum, s.charNum, s.strVal);
                :}
				| LPAREN exp:e RPAREN
                {: RESULT = e;
                :}
				| fctnCall:fn
                {: RESULT = fn;
                :}
				;

assignExp		::= loc:lo ASSIGN exp:e
				{: RESULT = new AssignExpNode(lo, e);
				:}
				;

exp				::= assignExp:exp
				{: RESULT = exp;
				:}
				| exp:e1 PLUS exp:e2
				{: RESULT = new PlusNode(e1, e2);
				:}
				| exp:e1 MINUS exp:e2
                {: RESULT = new MinusNode(e1, e2);
                :}
				| exp:e1 TIMES exp:e2
                {: RESULT = new TimesNode(e1, e2);
                :}
				| exp:e1 DIVIDE exp:e2
                {: RESULT = new DivideNode(e1, e2);
                :}	
				| exp:e1 EQUALS exp:e2
                {: RESULT = new EqualsNode(e1, e2);
                :}
				| exp:e1 NOTEQUALS exp:e2
                {: RESULT = new NotEqualsNode(e1, e2);
                :}
				| exp:e1 GREATER exp:e2
                {: RESULT = new GreaterNode(e1, e2);
                :}
				| exp:e1 GREATEREQ exp:e2
                {: RESULT = new GreaterEqNode(e1, e2);
                :}
				| exp:e1 LESS exp:e2
                {: RESULT = new LessNode(e1, e2);
                :}
				| exp:e1 LESSEQ exp:e2
                {: RESULT = new LessEqNode(e1, e2);
                :}
				| exp:e1 AND exp:e2
                {: RESULT = new AndNode(e1, e2);
                :}
				| exp:e1 OR exp:e2
                {: RESULT = new OrNode(e1, e2);
                :}
				| NOT exp:e1
                {: RESULT = new NotNode(e1);
                :}
				| MINUS term:t1
				{: RESULT = new UnaryMinusNode(t1);
                :}
				| term:t1
				{: RESULT = t1;
				:}
				;
