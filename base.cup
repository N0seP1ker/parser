/**********************************************************************
 Java CUP specification for a parser for base programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).lineNum,
                     ((TokenVal)currToken.value).charNum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INTEGER;
terminal                LOGICAL;
terminal                VOID;
terminal                TUPLE;
terminal                TRUE;
terminal                FALSE;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                LSQBRACKET;
terminal                RSQBRACKET;
terminal                COLON;
terminal                COMMA;
terminal                DOT;
terminal                INPUTOP;
terminal                OUTPUTOP;
terminal                ASSIGN;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                AND;
terminal                OR;
terminal                NOT;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                GREATER;
terminal                GREATEREQ;
terminal                LESS;
terminal                LESSEQ;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                READ;
terminal                WRITE;
terminal                RETURN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode         type;
non terminal IdNode           id;
non terminal LinkedList  	  tupleBody;
non terminal TupleDeclNode    tupleDecl;
non terminal FormalsListNode  formals;
non terminal LinkedList		  formalsList;
non terminal FormalDeclNode	  formalDecl;
non terminal FctnDeclNode	  fctnDecl;
non terminal FctnBodyNode	  fctnBody;
non terminal LinknedList	  varDeclList; 
 
/* NOTE: Add precedence and associativity declarations here */


start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
		|   tupleDecl: t
		{: RESULT = t;
		:}
		|	fctnDecl: f
		{:	RESULT = f;
		:}
                ;
/
varDeclList	::= varDeclList:vdl varDecl:vd
		{:	vdl.add(vd);
			RESULT = vdl;
		:}
		| /* epsilon */
		{:	RESULT = new LinkedList<varDeclNode>();
		:}
		;

varDecl         ::= type:t id:i DOT
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NON_TUPLE);
                :}
		|  TUPLE id:id1 id:id2 DOT
		{: RESULT = new VarDeclNode(new TupleNode(id1), id2, 2);
		:}
                ;

fctnDecl	::= type:t id:i formals:fm fctnBody:fb
		{: RESULT = new FctnDeclNode(t, i, fm, fb); 
		:}
		;

type            ::= LOGICAL
                {: RESULT = new LogicalNode();
                :}
		|  INTEGER
		{: RESULT = new IntegerNode();
		:}
		|  VOID
		{: RESULT = new VoidNode();
		:}
		;

id              ::= ID:i
                {: RESULT = new IdNode(i.lineNum, i.charNum, i.idVal);
                :}
                ;


tupleDecl	::= TUPLE id:i LCURLY tupleBody:tb RCURLY DOT
		{: RESULT = new TupleDeclNode(i, new DeclListNode(tb));
		:}
		;

tupleBody	::= tupleBody:tb varDecl:v
		{: tb.add(v);
		   RESULT = tb;
		:}
		|  varDecl:v
		{: LinkedList<DeclNode> list = new LinkedList<DeclNode>();
		   list.add(v);
		   RESULT = list;
		:}
		;

formals		::= LCURLY RCURLY
		{: LinkedList<FormalDeclNode> emptyList = new LinkedList<FormalDeclNode>();
		   RESULT = new FormalsListNode(emptyList);
		:}
		|  LCURLY formalsList:fl RCURLY
		{: RESULT = new FormalsListNode(fl);
		:}
		;

formalsList	::= formalDecl:fd
		{: LinkedList<FormalDeclNode> list = new LinkedList<FormalDeclNode>();
		   list.add(fd);
		   RESULT = list;
		:}
		| formalDecl:fd COMMA formalsList:fl
		{: fl.addFirst(fd);
		   RESULT = fl;
		:}
		;

formalDecl	::= type:t id:i
		{: RESULT = new FormalDeclNode(t, i);
		:}
		;

fctnBody	::= LSQBRACKET varDeclList:vdl stmtList:sl RSQBRACKET
		{: RESULT = new FctnBodyNode(vdl, sl);
		:}
		;

loc		::= id:i
		{: RESULT = i;
		:}
		| loc:l COLON id:i
		{: RESULT = new TupleAccessExpNode(l, i);
		}:
		;

term		::= loc:lo
		{: RESULT = lo;
		:}
		| TRUE
		{: RESULT = new TrueNode();
		:}
		| FALSE
		{: RESULT = new FalseNode();
		:}
		| INTLITERAL
                {: RESULT = new IntLitNode();
                :}
		| STRLITERAL
                {: RESULT = new StringLitNode();
                :}
		| LPAREN exp:e RPAREN
                {: RESULT = e;
                :}
		| fctnCall:fn
                {: RESULT = fn;
                :}
		;

assignExp	::= loc:lo ASSIGN exp:e
		{: RESULT = new AssignExpNode(lo, e);;
		:}
		;

exp		::= assignExp:exp
		{: RESULT = exp;
		:}
		| exp:e1 PLUS exp:e2
		{: RESULT = new PlusNode(e1, e2);
		:}
		| exp:e1 MINUS exp:e2
                {: RESULT = new MinusNode(e1, e2);
                :}
		| exp:e1 TIMES exp:e2
                {: RESULT = new TimesNode(e1, e2);
                :}
		| exp:e1 DIVIDE exp:e2
                {: RESULT = new DivideNode(e1, e2);
                :}	
		| exp:e1 EQUALS exp:e2
                {: RESULT = new EqualsNode(e1, e2);
                :}
		| exp:e1 NOTEQUALS exp:e2
                {: RESULT = new NotEqualsNode(e1, e2);
                :}
		| exp:e1 GREATER exp:e2
                {: RESULT = new GreaterNode(e1, e2);
                :}
		| exp:e1 GREATEREQ exp:e2
                {: RESULT = new GreaterEqNode(e1, e2);
                :}
		| exp:e1 LESS exp:e2
                {: RESULT = new LessNode(e1, e2);
                :}
		| exp:e1 LESSEQ exp:e2
                {: RESULT = new LessEqNode(e1, e2);
                :}
		| exp:e1 AND exp:e2
                {: RESULT = new AndNode(e1, e2);
                :}
		| exp:e1 OR exp:e2
                {: RESULT = new OrNode(e1, e2);
                :}
		| NOT exp:e1
                {: RESULT = new NotNode(e1);
                :}
		| MINUS term:t1
                {: RESULT = new UnaryMinusNode(t1);
                :}
		| term:t1
		{: RESULT = t1;
		:}
		;
